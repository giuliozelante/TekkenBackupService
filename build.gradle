plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.19'
    id 'org.beryx.jlink' version '2.26.0'
    id 'com.github.ben-manes.versions' version "0.47.0"
    id("com.palantir.graal") version "0.12.0"
}

repositories {
    mavenCentral()
}

javafx {
    version = javafxVersion
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}"
    implementation "org.apache.commons:commons-configuration2:${commonsConfiguration2Version}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "junit:junit:${junitVersion}"
}

application {
    mainClass = 'org.gzelante.tbs.MainApp'
    applicationDefaultJvmArgs = [
            '-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image'
    ]
}

jlink {
    launcher {
        name = 'TekkenBackupService'
    }
}

run {
    jvmArgs = [
            '-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image',
            '-XshowSettings:all'
    ]
}

// Configure GraalVM.
graal {
    mainClass 'org.gzelante.tbs.MainApp'
    outputName 'tekken-backup-service'
    graalVersion "${graalVersion}"
    javaVersion '11'

    option '--no-fallback'
    option '--allow-incomplete-classpath'

    // On Windows, provide the path to the VC++ build tools.
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        windowsVsVarsPath('C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars64.bat')
    }
}
